                              Muldis::Rosetta
                                   TODO
---------------------------------------------------------------------------

Following is a summary of things that still need doing.  It is specific to
the Muldis-Rosetta core distribution only, and doesn't talk about things
that would go in other distributions.  (But, look at
lib/Muldis/Rosetta/SeeAlso.pod for a list of other related distributions
that should be created.)

The following list is loosely ordered by priority, but list items may
actually be addressed in a different order.  There is no specific time
table for these items; they are simply to be done "as soon as possible".

* Generally speaking, make a new release to CPAN once every week, assuming
the progress is non-trivial, so there are regular public snapshots with
nicely rendered documentation.

* Create a new Git repo, both locally and remotely on Github/etc, and
import the history of the Perl 6 Muldis::Rosetta.  For simplicity, just
import manually as subsequent commits just the states of P6MR that
corresponded to numbered CPAN releases of the Perl 5 version.  These would
have been tarballed but not distributed at the time, and included every
version 0.0.0 thru 0.6.0 plus 0.7.0 (skipping 0.6.1 and 0.6.2). For those
tarballed versions, the commits would be identical in every way. Then,
subsequent commits can be made corresponding to each Perl 5 release after
0.7.0, in a retcon manner as if the Perl 6 version had been kept in sync
all along.  However, any files which traditionally were identical will
remain so, including: Changes, README, TODO, SeeAlso.pod.  This will be
done through and including the last existing CPAN release 0.16.0.  So for
those releases, the pristine Changes that said the Perl 6 version probably
didn't have any corresponding changes, is left as is.  Then a version
0.17.0 of the Perl 5 would be cut with minimal changes beyond what is
already in version control, those changes from 0.16.0 amounting to nothing
but documentation and dependencies-version updates.  The new retro commits
for 0.7.0^..0.16.0 would have the minimal changes to the Perl-6-unique
portions and would continue to be written against the same Perl syntax or
feature set as it was around release 0.6.0 or something but the main point
is that none of these releases would be run through Rakudo-Star and it
would be assumed that they wouldn't compile.  And then the Perl 6 code
would be updated such that Rakudo-Star *does* compile it and run its test
suite, as such that there is, and then corresponding versions 0.17.0 of the
Perl 5 and 6 versions would be released.  The 0.17.0 would maintain
identical Changes/README/TODO/SeeAlso.pod, though these would be updated so
say co-developing status is back on, and in particular the Changes file
would have its historical releases annotated for the Perl 6 versions being
made in 2010/etc; the Changes file will not lie about when the Perl 6
versions of 0.8.0+ were made.  All of the distro files would have the
minimal changes possible aside from synchronization, through the 0.17.0
release.  Also, the 0.17.0 would gain the files MANIFEST, GPL/LGPL, etc
to complete that aspect of synchronization, as it is now standalone rather
than embedded in a large distro having a superceding those 3 files/etc.
Then, after the 0.17.0, each can be free to diverge if it wishes,
including each Changes file then only including details about the same
language version, or something, though stating just the release dates of
the other version.  After 0.17.0 and for 0.18.0, the substantial overhauls
such as defined in the next TODO item can be done, and/or at that time any
"re-writes" can occur.  Or maybe a 0.17.1 could go out first that
truncates/summarizes the Changes file as per MD 0.129.1?
Don't forget to update refs in Muldis D - Implementations to reflect the
new status of Muldis Rosetta for Perl 6.

* Split up all applicable Interface routines into versions that are
exclusive to either the Plain Text category of language inputs or the
Hosted Data category of language inputs, rather than there being any
routines that accept both; but all post-split variants will still take
Value objects.  The variants will have the same names but for having either
"pt" or "hd" added to their names.  The primary reason for this split is
security; if applications stick to using just the Hosted Data variants,
then they can have a much stronger guarantee that code generated with
untrusted user input will be properly encoded or be passed using bind
parameters, and they won't have to remember to do this themselves, as would
be the case with the Plain Text variants.  When they are just using HD
variants, applications are saved from some kinds of mistakes, such as
passing the wrong variable or value that accidentally contains a string
rather than a structure.  Similarly, a wrapper over Muldis Rosetta can more
easily exclude Plain Text from even being available as an API option; or
Perhaps Muldis Rosetta itself can do this, by having
language-category-specific roles, which just include one of the 2 variants
so the other can't be invoked from it.  The secondary reason for this split
is to make it easier to accept Hosted Data inputs denoting simple scalar
values; the old method of distinguishing whether to dispatch an input to
the PT parser vs the HD parser, by examining whether it is a Perl scalar or
a Perl ref, can be avoided; the Hosted Data variants can now take simple
scalar value inputs as themselves.

* Update the Interface routine list and decide between having 4 separate
routines to invoke each of func/upd/rcp/proc versus having just the 2
separate routines func/imp.  The current func/upd/proc triple can't stay.

* Consider using Carp::Clan module, if it would be useful.

* Update Interface.pm and Engine.pm concerning that Muldis D no longer has
a bootloader concept, and regular Muldis D depots are used instead.
THE FIRST SENTENCE AFFECTS THE REST OF THIS TODO ITEM, WHICH IS OUTDATED.
Update Interface.pm to add a few specialized Process methods for loading
or dumping whole depots.  The first sort of exists already in the form of
execute() though that'll need to be able to take an entire depot content
declaratively, catalog plus data at once.  The second would be added and
would dump a whole depot catalog+schema.  This is different than what
reading the payload of a Value does, as it could dump a bootloader.  Note
that this and the next item suggests a bit of Muldis D language
enhancements are necessary.

* Reorganize the plan for Example.pm so that the same load and dump code is
used at both ends, both storage and application, since by default Example
depots are stored on disk as Muldis D source code describing the depot.  So
Util/Tiny.pm will also go away as it turns out other Engines should stand
to use something more efficient or dependency-requiring than Example would;
also, the version for Example is now to be simpler to not be streamable,
and just work where the source can all be in memory at once so parsing etc
is just on a normal Perl string variable.

* Implement the Muldis D metamodel, that is, the catalog.  This is the main
prerequisite for doing anything moderately more complex than what has
already been done, including the support for user-defined data types,
stored routines, constraints, virtual variables, and persisting databases.

* Flesh out the user-input validation code in the Example Engine, as is
appropriate, so that all bad input results in graceful failures rather than
ungraceful ones.

* Flesh out the various parts of the test suite.  There are currently 2
main parts envisioned:  1.  Several t/*.t files that test support libraries
of Example.pm in isolation.  2.  The Validator[|*].pm files which test
Interface.pm and the Example Engine as a whole, as well as being reused for
other Engine distributions.  Note that the core test suite should execute
in the above given order, so consider renaming the Validate Example test to
a higher number than 50 to make more room for others, such as to 80 or 90
or 99.

* Update the Example Engine to implement the rest of the relational
algebra|calculus operators, as well as all the reasonable operators for
other core data types: Bool, Int, Blob, Text, Rat.

* Update the Example Engine to implement persisting databases.  For
simplicity of implementation and learning, a whole depot will simply be one
file containing serializations of all the relevant Perl data structures
defining its catalog and data.  While this is very much non-scalable, the
Example Engine is not intended to be scalable, just provide the correct
semantics in the simplest way possible.  Other Engines will presumably do
persistence in an intelligent and scalable (and more complicated) manner.

* Update the Example Engine to implement the optional system-defined data
types: temporal, spatial.

* Optimize the Example Engine as can be done without making it too
complicated for its primary use as an Engine reference implementation /
learning tool.

* Add option to Example where Muldis D code can be pre-compiled into equiv
Perl code and then just the latter is loaded at runtime.  This would be an
analogy to how a Parrot HLL can be pre-compiled to PBC (name?) files.  This
in particular is meant to apply to the system-defined types, routines that
are defined in Muldis D.  It would be a caching mechanism.  For that
matter, perhaps multiple Perl classes can be pre-generated from Muldis D
types/etc as appropriate?

* Judiciously add external dependencies (besides Perl itself) to this core
framework, at such times that a reasonable case can be made for it.

* Applicable to the Perl 6 version only:  Exploit additional Perl 6
features as they become implemented in Pugs and/or elsewhere, so to
simplify our own code, which currently does manually what Perl 6 should do
for us.  Examples being that if Perl actually enforces routine signatures,
we won't have to manually check our arguments as much as we do, or at all.

* Applicable to the Perl 5 version only:  Consider adding dependencies on
Module::Build and/or some better exception handling module.  Consider
raising the Perl version dependency to 5.12.1 from 5.8.3, to simplify
further dependencies.

* Whatever else needs doing, such as, fixing bugs.
